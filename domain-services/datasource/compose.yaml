services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./seed.sql:/docker-entrypoint-initdb.d/seed.sql

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - ./init:/usr/share/elasticsearch/init
    entrypoint: >
      /bin/bash -c "elasticsearch-plugin install analysis-phonetic;
      /usr/local/bin/docker-entrypoint.sh"

  # DB IDE for PostgreSQL only
  pgadmin:
    container_name: pgadmin
    image:  dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: user@user.com
      PGADMIN_DEFAULT_PASSWORD: test123
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test123
      POSTGRES_DB: postgres
    ports:
    - "8889:80"
    volumes:
      - ./pg-admin-setup/servers.json:/pgadmin4/servers.json

  kibana:
    image: docker.elastic.co/kibana/kibana:8.4.3
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  elastic_setup_data:
    image: curlimages/curl
    depends_on:
      - elasticsearch
    entrypoint: >
      /bin/bash -c "
      sleep 10;
      curl -X PUT 'http://elasticsearch:9200/demo' -H 'Content-Type: application/json' -d '{\"settings\": {\"number_of_shards\": 1}, \"mappings\": {\"properties\": {\"title\": {\"type\": \"text\"}}}}';
      curl -X POST 'http://elasticsearch:9200/demo/_doc/1' -H 'Content-Type: application/json' -d '{\"title\": \"Elasticsearch for Beginners\"}';
      curl -X POST 'http://elasticsearch:9200/demo/_doc/2' -H 'Content-Type: application/json' -d '{\"title\": \"Advanced Search in Elasticsearch\"}';
      curl -X POST 'http://elasticsearch:9200/demo/_doc/3' -H 'Content-Type: application/json' -d '{\"title\": \"Deploying Elasticsearch with Docker\"}';
      "

  kibana_setup:
    image: curlimages/curl
    depends_on:
      - kibana
    entrypoint: >
      /bin/bash -c "
      sleep 30;
      curl -X POST 'http://kibana:5601/api/saved_objects/index-pattern/demo-pattern' -H 'Content-Type: application/json' -H 'kbn-xsrf: true' -d '{\"attributes\": {\"title\": \"demo-*\", \"timeFieldName\": \"timestamp\"}}';
      curl -X POST 'http://kibana:5601/api/saved_objects/dashboard/demo-dashboard' -H 'Content-Type: application/json' -H 'kbn-xsrf: true' -d '{\"attributes\": {\"title\": \"Demo Dashboard\"}}';
      "

  # Hasura DDN does not have a UI for Database setups or authorization, as opposed
  # to working purely in DDN (3.0), I'm including a 2.0 engine that can be used to
  # generate metadata that can be converted to Hasura DDN complient YAML; this is
  # included ONLY for local development purposes
  graphql-engine-editor:
    image: hasura/graphql-engine:latest
    depends_on:
      - "postgres"
    restart: always
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@postgres:5432/metadata
      API_HUB: postgres://postgres:postgres@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: 123456
      # un-comment the following line to activate JWT Authentication:
      #HASURA_GRAPHQL_JWT_SECRET: '{ "type": "RS256", "jwk_url": "http://keycloak:8080/realms/ski/protocol/openid-connect/certs","claims_map":{"x-hasura-allowed-roles":["query_world","query_usda","query_mutate_adventureworks","query_mutate_chinook","query_mutate_vercel"],"x-hasura-default-role":"query_world"} }'
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "naming_convention"
      
volumes:
  es_data:
